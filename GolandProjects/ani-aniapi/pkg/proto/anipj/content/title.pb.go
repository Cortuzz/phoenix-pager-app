// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: anipj/content/title.proto

package content

import (
	fieldmask "/anipj/protobuf/fieldmask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelatedTitle_Type int32

const (
	RelatedTitle_UNSPECIFIED RelatedTitle_Type = 0   // invalid
	RelatedTitle_SEQUEL      RelatedTitle_Type = 1   // предыстория - продолжение
	RelatedTitle_ADAPTATION  RelatedTitle_Type = 2   // первоисточник - адаптация
	RelatedTitle_ALTERNATIVE RelatedTitle_Type = 3   // изначальная история - альтернативная история
	RelatedTitle_SUMMARY     RelatedTitle_Type = 4   // полная история - обобщение
	RelatedTitle_OTHER       RelatedTitle_Type = 100 // другое - другое
)

// Enum value maps for RelatedTitle_Type.
var (
	RelatedTitle_Type_name = map[int32]string{
		0:   "UNSPECIFIED",
		1:   "SEQUEL",
		2:   "ADAPTATION",
		3:   "ALTERNATIVE",
		4:   "SUMMARY",
		100: "OTHER",
	}
	RelatedTitle_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SEQUEL":      1,
		"ADAPTATION":  2,
		"ALTERNATIVE": 3,
		"SUMMARY":     4,
		"OTHER":       100,
	}
)

func (x RelatedTitle_Type) Enum() *RelatedTitle_Type {
	p := new(RelatedTitle_Type)
	*p = x
	return p
}

func (x RelatedTitle_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedTitle_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_anipj_content_title_proto_enumTypes[0].Descriptor()
}

func (RelatedTitle_Type) Type() protoreflect.EnumType {
	return &file_anipj_content_title_proto_enumTypes[0]
}

func (x RelatedTitle_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedTitle_Type.Descriptor instead.
func (RelatedTitle_Type) EnumDescriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{11, 0}
}

type TitleCreateRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Model         *TitleModificationModel `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleCreateRequest) Reset() {
	*x = TitleCreateRequest{}
	mi := &file_anipj_content_title_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleCreateRequest) ProtoMessage() {}

func (x *TitleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleCreateRequest.ProtoReflect.Descriptor instead.
func (*TitleCreateRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{0}
}

func (x *TitleCreateRequest) GetModel() *TitleModificationModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type TitleCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TitleId       int32                  `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleCreateResponse) Reset() {
	*x = TitleCreateResponse{}
	mi := &file_anipj_content_title_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleCreateResponse) ProtoMessage() {}

func (x *TitleCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleCreateResponse.ProtoReflect.Descriptor instead.
func (*TitleCreateResponse) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{1}
}

func (x *TitleCreateResponse) GetTitleId() int32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

type TitleUpdateRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Model         *TitleModificationModel `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask  `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	MergeOptions  *fieldmask.MergeOptions `protobuf:"bytes,3,opt,name=merge_options,json=mergeOptions,proto3" json:"merge_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleUpdateRequest) Reset() {
	*x = TitleUpdateRequest{}
	mi := &file_anipj_content_title_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleUpdateRequest) ProtoMessage() {}

func (x *TitleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleUpdateRequest.ProtoReflect.Descriptor instead.
func (*TitleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{2}
}

func (x *TitleUpdateRequest) GetModel() *TitleModificationModel {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *TitleUpdateRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *TitleUpdateRequest) GetMergeOptions() *fieldmask.MergeOptions {
	if x != nil {
		return x.MergeOptions
	}
	return nil
}

type SetExternalResourceForRankingRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TitleId            int32                  `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	ExternalResourceId int32                  `protobuf:"varint,2,opt,name=external_resource_id,json=externalResourceId,proto3" json:"external_resource_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetExternalResourceForRankingRequest) Reset() {
	*x = SetExternalResourceForRankingRequest{}
	mi := &file_anipj_content_title_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetExternalResourceForRankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetExternalResourceForRankingRequest) ProtoMessage() {}

func (x *SetExternalResourceForRankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetExternalResourceForRankingRequest.ProtoReflect.Descriptor instead.
func (*SetExternalResourceForRankingRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{3}
}

func (x *SetExternalResourceForRankingRequest) GetTitleId() int32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *SetExternalResourceForRankingRequest) GetExternalResourceId() int32 {
	if x != nil {
		return x.ExternalResourceId
	}
	return 0
}

type RateTitleRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	TitleId int32                  `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	Rate    float32                `protobuf:"fixed32,2,opt,name=rate,proto3" json:"rate,omitempty"` // значение должно соответствовать принятой градации оценок
	// Если не указано, значение берётся из контекста пользователя, который вызвал.
	// Для вызова от лица другого пользователя, требуется соответствующая привилегия.
	UserId        *int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateTitleRequest) Reset() {
	*x = RateTitleRequest{}
	mi := &file_anipj_content_title_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateTitleRequest) ProtoMessage() {}

func (x *RateTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateTitleRequest.ProtoReflect.Descriptor instead.
func (*RateTitleRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{4}
}

func (x *RateTitleRequest) GetTitleId() int32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *RateTitleRequest) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RateTitleRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type TitleModificationModel struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Id                  int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FranchiseId         int32                    `protobuf:"varint,3,opt,name=franchise_id,json=franchiseId,proto3" json:"franchise_id,omitempty"`
	Names               []*NameVariant           `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Description         *string                  `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AudienceRestriction *string                  `protobuf:"bytes,6,opt,name=audience_restriction,json=audienceRestriction,proto3,oneof" json:"audience_restriction,omitempty"` // возрастное ограничение (G, PG, PG-13, R, NC-17, R+, RX)
	ProductionStatus    ProductionStatus         `protobuf:"varint,7,opt,name=production_status,json=productionStatus,proto3,enum=anipj.content.v1dev.ProductionStatus" json:"production_status,omitempty"`
	AnnouncedAt         *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=announced_at,json=announcedAt,proto3,oneof" json:"announced_at,omitempty"`
	ReleasedAt          *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=released_at,json=releasedAt,proto3,oneof" json:"released_at,omitempty"`
	ExternalResources   []*TitleExternalResource `protobuf:"bytes,10,rep,name=external_resources,json=externalResources,proto3" json:"external_resources,omitempty"`
	Characters          []*CharacterInTitle      `protobuf:"bytes,11,rep,name=characters,proto3" json:"characters,omitempty"`
	Persons             []*PersonRoleInTitle     `protobuf:"bytes,12,rep,name=persons,proto3" json:"persons,omitempty"`
	Studios             []*StudioRoleInTitle     `protobuf:"bytes,13,rep,name=studios,proto3" json:"studios,omitempty"`
	TitleRelations      []*RelatedTitle          `protobuf:"bytes,14,rep,name=title_relations,json=titleRelations,proto3" json:"title_relations,omitempty"` // связь этого Тайтла с другими
	// обязательно указать тип тайтла
	//
	// Types that are valid to be assigned to Type:
	//
	//	*TitleModificationModel_Anime_
	Type          isTitleModificationModel_Type `protobuf_oneof:"Type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleModificationModel) Reset() {
	*x = TitleModificationModel{}
	mi := &file_anipj_content_title_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleModificationModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleModificationModel) ProtoMessage() {}

func (x *TitleModificationModel) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleModificationModel.ProtoReflect.Descriptor instead.
func (*TitleModificationModel) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{5}
}

func (x *TitleModificationModel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TitleModificationModel) GetFranchiseId() int32 {
	if x != nil {
		return x.FranchiseId
	}
	return 0
}

func (x *TitleModificationModel) GetNames() []*NameVariant {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *TitleModificationModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TitleModificationModel) GetAudienceRestriction() string {
	if x != nil && x.AudienceRestriction != nil {
		return *x.AudienceRestriction
	}
	return ""
}

func (x *TitleModificationModel) GetProductionStatus() ProductionStatus {
	if x != nil {
		return x.ProductionStatus
	}
	return ProductionStatus_PRODUCTION_STATUS_UNSPECIFIED
}

func (x *TitleModificationModel) GetAnnouncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnnouncedAt
	}
	return nil
}

func (x *TitleModificationModel) GetReleasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *TitleModificationModel) GetExternalResources() []*TitleExternalResource {
	if x != nil {
		return x.ExternalResources
	}
	return nil
}

func (x *TitleModificationModel) GetCharacters() []*CharacterInTitle {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *TitleModificationModel) GetPersons() []*PersonRoleInTitle {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *TitleModificationModel) GetStudios() []*StudioRoleInTitle {
	if x != nil {
		return x.Studios
	}
	return nil
}

func (x *TitleModificationModel) GetTitleRelations() []*RelatedTitle {
	if x != nil {
		return x.TitleRelations
	}
	return nil
}

func (x *TitleModificationModel) GetType() isTitleModificationModel_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TitleModificationModel) GetAnime() *TitleModificationModel_Anime {
	if x != nil {
		if x, ok := x.Type.(*TitleModificationModel_Anime_); ok {
			return x.Anime
		}
	}
	return nil
}

type isTitleModificationModel_Type interface {
	isTitleModificationModel_Type()
}

type TitleModificationModel_Anime_ struct {
	Anime *TitleModificationModel_Anime `protobuf:"bytes,100,opt,name=anime,proto3,oneof"` // Manga
}

func (*TitleModificationModel_Anime_) isTitleModificationModel_Type() {}

type Title struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Id                  int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FranchiseId         int32                    `protobuf:"varint,3,opt,name=franchise_id,json=franchiseId,proto3" json:"franchise_id,omitempty"`
	Names               []*NameVariant           `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Description         *string                  `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AudienceRestriction *string                  `protobuf:"bytes,6,opt,name=audience_restriction,json=audienceRestriction,proto3,oneof" json:"audience_restriction,omitempty"` // возрастное ограничение (G, PG, PG-13, R, NC-17, R+, RX)
	ProductionStatus    ProductionStatus         `protobuf:"varint,7,opt,name=production_status,json=productionStatus,proto3,enum=anipj.content.v1dev.ProductionStatus" json:"production_status,omitempty"`
	AnnouncedAt         *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=announced_at,json=announcedAt,proto3,oneof" json:"announced_at,omitempty"`
	ReleasedAt          *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=released_at,json=releasedAt,proto3,oneof" json:"released_at,omitempty"`
	ExternalResources   []*TitleExternalResource `protobuf:"bytes,10,rep,name=external_resources,json=externalResources,proto3" json:"external_resources,omitempty"`
	Characters          []*CharacterInTitle      `protobuf:"bytes,11,rep,name=characters,proto3" json:"characters,omitempty"`
	Persons             []*PersonRoleInTitle     `protobuf:"bytes,12,rep,name=persons,proto3" json:"persons,omitempty"`
	Studios             []*StudioRoleInTitle     `protobuf:"bytes,13,rep,name=studios,proto3" json:"studios,omitempty"`
	TitleRelations      []*RelatedTitle          `protobuf:"bytes,14,rep,name=title_relations,json=titleRelations,proto3" json:"title_relations,omitempty"` // связь этого Тайтла с другими
	Tags                []*TagOnEntity           `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Statistics          *TitleStatistics         `protobuf:"bytes,16,opt,name=statistics,proto3" json:"statistics,omitempty"`
	PrimaryPictureId    *int32                   `protobuf:"varint,17,opt,name=primary_picture_id,json=primaryPictureId,proto3,oneof" json:"primary_picture_id,omitempty"`
	Pictures            []*Picture               `protobuf:"bytes,18,rep,name=pictures,proto3" json:"pictures,omitempty"`
	// обязательно указать тип тайтла
	//
	// Types that are valid to be assigned to Type:
	//
	//	*Title_Anime_
	//	*Title_Manga_
	Type          isTitle_Type `protobuf_oneof:"Type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Title) Reset() {
	*x = Title{}
	mi := &file_anipj_content_title_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title) ProtoMessage() {}

func (x *Title) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title.ProtoReflect.Descriptor instead.
func (*Title) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{6}
}

func (x *Title) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Title) GetFranchiseId() int32 {
	if x != nil {
		return x.FranchiseId
	}
	return 0
}

func (x *Title) GetNames() []*NameVariant {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Title) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Title) GetAudienceRestriction() string {
	if x != nil && x.AudienceRestriction != nil {
		return *x.AudienceRestriction
	}
	return ""
}

func (x *Title) GetProductionStatus() ProductionStatus {
	if x != nil {
		return x.ProductionStatus
	}
	return ProductionStatus_PRODUCTION_STATUS_UNSPECIFIED
}

func (x *Title) GetAnnouncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnnouncedAt
	}
	return nil
}

func (x *Title) GetReleasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *Title) GetExternalResources() []*TitleExternalResource {
	if x != nil {
		return x.ExternalResources
	}
	return nil
}

func (x *Title) GetCharacters() []*CharacterInTitle {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Title) GetPersons() []*PersonRoleInTitle {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *Title) GetStudios() []*StudioRoleInTitle {
	if x != nil {
		return x.Studios
	}
	return nil
}

func (x *Title) GetTitleRelations() []*RelatedTitle {
	if x != nil {
		return x.TitleRelations
	}
	return nil
}

func (x *Title) GetTags() []*TagOnEntity {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Title) GetStatistics() *TitleStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Title) GetPrimaryPictureId() int32 {
	if x != nil && x.PrimaryPictureId != nil {
		return *x.PrimaryPictureId
	}
	return 0
}

func (x *Title) GetPictures() []*Picture {
	if x != nil {
		return x.Pictures
	}
	return nil
}

func (x *Title) GetType() isTitle_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Title) GetAnime() *Title_Anime {
	if x != nil {
		if x, ok := x.Type.(*Title_Anime_); ok {
			return x.Anime
		}
	}
	return nil
}

func (x *Title) GetManga() *Title_Manga {
	if x != nil {
		if x, ok := x.Type.(*Title_Manga_); ok {
			return x.Manga
		}
	}
	return nil
}

type isTitle_Type interface {
	isTitle_Type()
}

type Title_Anime_ struct {
	Anime *Title_Anime `protobuf:"bytes,101,opt,name=anime,proto3,oneof"`
}

type Title_Manga_ struct {
	Manga *Title_Manga `protobuf:"bytes,102,opt,name=manga,proto3,oneof"`
}

func (*Title_Anime_) isTitle_Type() {}

func (*Title_Manga_) isTitle_Type() {}

type TitleExternalResource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceDomain  string                 `protobuf:"bytes,2,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"` // домен-источник, например shikimori.one
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	DisplayName   *string                `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Rating        *float32               `protobuf:"fixed32,5,opt,name=rating,proto3,oneof" json:"rating,omitempty"`                          // оценка на внешнем ресурсе в 10 бальной шкале
	ViewsCount    *uint64                `protobuf:"varint,6,opt,name=views_count,json=viewsCount,proto3,oneof" json:"views_count,omitempty"` // число просмотров (популярность) на внешнем ресурсе
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleExternalResource) Reset() {
	*x = TitleExternalResource{}
	mi := &file_anipj_content_title_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleExternalResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleExternalResource) ProtoMessage() {}

func (x *TitleExternalResource) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleExternalResource.ProtoReflect.Descriptor instead.
func (*TitleExternalResource) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{7}
}

func (x *TitleExternalResource) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TitleExternalResource) GetSourceDomain() string {
	if x != nil {
		return x.SourceDomain
	}
	return ""
}

func (x *TitleExternalResource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TitleExternalResource) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *TitleExternalResource) GetRating() float32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *TitleExternalResource) GetViewsCount() uint64 {
	if x != nil && x.ViewsCount != nil {
		return *x.ViewsCount
	}
	return 0
}

type CharacterInTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CharacterId   int32                  `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	ActorId       *int32                 `protobuf:"varint,2,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"` // Person который играет этого персонажа
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharacterInTitle) Reset() {
	*x = CharacterInTitle{}
	mi := &file_anipj_content_title_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterInTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterInTitle) ProtoMessage() {}

func (x *CharacterInTitle) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterInTitle.ProtoReflect.Descriptor instead.
func (*CharacterInTitle) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{8}
}

func (x *CharacterInTitle) GetCharacterId() int32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterInTitle) GetActorId() int32 {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return 0
}

type PersonRoleInTitle struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PersonId        int32                  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	RoleDescription string                 `protobuf:"bytes,2,opt,name=role_description,json=roleDescription,proto3" json:"role_description,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PersonRoleInTitle) Reset() {
	*x = PersonRoleInTitle{}
	mi := &file_anipj_content_title_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonRoleInTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonRoleInTitle) ProtoMessage() {}

func (x *PersonRoleInTitle) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonRoleInTitle.ProtoReflect.Descriptor instead.
func (*PersonRoleInTitle) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{9}
}

func (x *PersonRoleInTitle) GetPersonId() int32 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonRoleInTitle) GetRoleDescription() string {
	if x != nil {
		return x.RoleDescription
	}
	return ""
}

type StudioRoleInTitle struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StudioId        int32                  `protobuf:"varint,1,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	RoleDescription *string                `protobuf:"bytes,2,opt,name=role_description,json=roleDescription,proto3,oneof" json:"role_description,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StudioRoleInTitle) Reset() {
	*x = StudioRoleInTitle{}
	mi := &file_anipj_content_title_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudioRoleInTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioRoleInTitle) ProtoMessage() {}

func (x *StudioRoleInTitle) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioRoleInTitle.ProtoReflect.Descriptor instead.
func (*StudioRoleInTitle) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{10}
}

func (x *StudioRoleInTitle) GetStudioId() int32 {
	if x != nil {
		return x.StudioId
	}
	return 0
}

func (x *StudioRoleInTitle) GetRoleDescription() string {
	if x != nil && x.RoleDescription != nil {
		return *x.RoleDescription
	}
	return ""
}

type RelatedTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TitleId       int32                  `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	Type          RelatedTitle_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=anipj.content.v1dev.RelatedTitle_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedTitle) Reset() {
	*x = RelatedTitle{}
	mi := &file_anipj_content_title_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTitle) ProtoMessage() {}

func (x *RelatedTitle) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTitle.ProtoReflect.Descriptor instead.
func (*RelatedTitle) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{11}
}

func (x *RelatedTitle) GetTitleId() int32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *RelatedTitle) GetType() RelatedTitle_Type {
	if x != nil {
		return x.Type
	}
	return RelatedTitle_UNSPECIFIED
}

type TitleStatistics struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	RatesCount      uint32                           `protobuf:"varint,1,opt,name=rates_count,json=ratesCount,proto3" json:"rates_count,omitempty"`
	Rating          float32                          `protobuf:"fixed32,2,opt,name=rating,proto3" json:"rating,omitempty"`
	ViewsCount      uint32                           `protobuf:"varint,3,opt,name=views_count,json=viewsCount,proto3" json:"views_count,omitempty"`
	RatesStatistics []*TitleStatistics_RateStatistic `protobuf:"bytes,4,rep,name=rates_statistics,json=ratesStatistics,proto3" json:"rates_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TitleStatistics) Reset() {
	*x = TitleStatistics{}
	mi := &file_anipj_content_title_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleStatistics) ProtoMessage() {}

func (x *TitleStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleStatistics.ProtoReflect.Descriptor instead.
func (*TitleStatistics) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{12}
}

func (x *TitleStatistics) GetRatesCount() uint32 {
	if x != nil {
		return x.RatesCount
	}
	return 0
}

func (x *TitleStatistics) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *TitleStatistics) GetViewsCount() uint32 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

func (x *TitleStatistics) GetRatesStatistics() []*TitleStatistics_RateStatistic {
	if x != nil {
		return x.RatesStatistics
	}
	return nil
}

type TitleModificationModel_Anime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          AnimeKind              `protobuf:"varint,1,opt,name=kind,proto3,enum=anipj.content.v1dev.AnimeKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleModificationModel_Anime) Reset() {
	*x = TitleModificationModel_Anime{}
	mi := &file_anipj_content_title_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleModificationModel_Anime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleModificationModel_Anime) ProtoMessage() {}

func (x *TitleModificationModel_Anime) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleModificationModel_Anime.ProtoReflect.Descriptor instead.
func (*TitleModificationModel_Anime) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TitleModificationModel_Anime) GetKind() AnimeKind {
	if x != nil {
		return x.Kind
	}
	return AnimeKind_ANIME_KIND_UNSPECIFIED
}

type Title_Anime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          AnimeKind              `protobuf:"varint,1,opt,name=kind,proto3,enum=anipj.content.v1dev.AnimeKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Title_Anime) Reset() {
	*x = Title_Anime{}
	mi := &file_anipj_content_title_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Title_Anime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title_Anime) ProtoMessage() {}

func (x *Title_Anime) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title_Anime.ProtoReflect.Descriptor instead.
func (*Title_Anime) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Title_Anime) GetKind() AnimeKind {
	if x != nil {
		return x.Kind
	}
	return AnimeKind_ANIME_KIND_UNSPECIFIED
}

type Title_Manga struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Title_Manga) Reset() {
	*x = Title_Manga{}
	mi := &file_anipj_content_title_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Title_Manga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title_Manga) ProtoMessage() {}

func (x *Title_Manga) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title_Manga.ProtoReflect.Descriptor instead.
func (*Title_Manga) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{6, 1}
}

type TitleStatistics_RateStatistic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rate          float32                `protobuf:"fixed32,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleStatistics_RateStatistic) Reset() {
	*x = TitleStatistics_RateStatistic{}
	mi := &file_anipj_content_title_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleStatistics_RateStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleStatistics_RateStatistic) ProtoMessage() {}

func (x *TitleStatistics_RateStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_title_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleStatistics_RateStatistic.ProtoReflect.Descriptor instead.
func (*TitleStatistics_RateStatistic) Descriptor() ([]byte, []int) {
	return file_anipj_content_title_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TitleStatistics_RateStatistic) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TitleStatistics_RateStatistic) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_anipj_content_title_proto protoreflect.FileDescriptor

var file_anipj_content_title_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x6e, 0x69,
	0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76,
	0x1a, 0x1a, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x57, 0x0a, 0x12, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x13, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x4c, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a,
	0x24, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x6b, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x88, 0x08, 0x0a, 0x16, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59,
	0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69,
	0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76,
	0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x64, 0x65, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x40, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x49, 0x0a, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x05, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xa9, 0x0a, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x64, 0x65, 0x76, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x4a,
	0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54,
	0x61, 0x67, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x1a, 0x3b, 0x0a, 0x05, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x0a, 0x05, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x42, 0x06, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x75, 0x0a, 0x11, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x72,
	0x6f, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x41, 0x50, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x64, 0x22, 0x85, 0x02, 0x0a,
	0x0f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0d, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0xf1, 0x02, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a,
	0x1d, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x39,
	0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x29, 0x5a, 0x0d, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x17, 0x41, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_anipj_content_title_proto_rawDescOnce sync.Once
	file_anipj_content_title_proto_rawDescData []byte
)

func file_anipj_content_title_proto_rawDescGZIP() []byte {
	file_anipj_content_title_proto_rawDescOnce.Do(func() {
		file_anipj_content_title_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anipj_content_title_proto_rawDesc), len(file_anipj_content_title_proto_rawDesc)))
	})
	return file_anipj_content_title_proto_rawDescData
}

var file_anipj_content_title_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anipj_content_title_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_anipj_content_title_proto_goTypes = []any{
	(RelatedTitle_Type)(0),                       // 0: anipj.content.v1dev.RelatedTitle.Type
	(*TitleCreateRequest)(nil),                   // 1: anipj.content.v1dev.TitleCreateRequest
	(*TitleCreateResponse)(nil),                  // 2: anipj.content.v1dev.TitleCreateResponse
	(*TitleUpdateRequest)(nil),                   // 3: anipj.content.v1dev.TitleUpdateRequest
	(*SetExternalResourceForRankingRequest)(nil), // 4: anipj.content.v1dev.SetExternalResourceForRankingRequest
	(*RateTitleRequest)(nil),                     // 5: anipj.content.v1dev.RateTitleRequest
	(*TitleModificationModel)(nil),               // 6: anipj.content.v1dev.TitleModificationModel
	(*Title)(nil),                                // 7: anipj.content.v1dev.Title
	(*TitleExternalResource)(nil),                // 8: anipj.content.v1dev.TitleExternalResource
	(*CharacterInTitle)(nil),                     // 9: anipj.content.v1dev.CharacterInTitle
	(*PersonRoleInTitle)(nil),                    // 10: anipj.content.v1dev.PersonRoleInTitle
	(*StudioRoleInTitle)(nil),                    // 11: anipj.content.v1dev.StudioRoleInTitle
	(*RelatedTitle)(nil),                         // 12: anipj.content.v1dev.RelatedTitle
	(*TitleStatistics)(nil),                      // 13: anipj.content.v1dev.TitleStatistics
	(*TitleModificationModel_Anime)(nil),         // 14: anipj.content.v1dev.TitleModificationModel.Anime
	(*Title_Anime)(nil),                          // 15: anipj.content.v1dev.Title.Anime
	(*Title_Manga)(nil),                          // 16: anipj.content.v1dev.Title.Manga
	(*TitleStatistics_RateStatistic)(nil),        // 17: anipj.content.v1dev.TitleStatistics.RateStatistic
	(*fieldmaskpb.FieldMask)(nil),                // 18: google.protobuf.FieldMask
	(*fieldmask.MergeOptions)(nil),               // 19: anipj.protobuf.field_mask.MergeOptions
	(*NameVariant)(nil),                          // 20: anipj.content.v1dev.NameVariant
	(ProductionStatus)(0),                        // 21: anipj.content.v1dev.ProductionStatus
	(*timestamppb.Timestamp)(nil),                // 22: google.protobuf.Timestamp
	(*TagOnEntity)(nil),                          // 23: anipj.content.v1dev.TagOnEntity
	(*Picture)(nil),                              // 24: anipj.content.v1dev.Picture
	(AnimeKind)(0),                               // 25: anipj.content.v1dev.AnimeKind
	(*emptypb.Empty)(nil),                        // 26: google.protobuf.Empty
}
var file_anipj_content_title_proto_depIdxs = []int32{
	6,  // 0: anipj.content.v1dev.TitleCreateRequest.model:type_name -> anipj.content.v1dev.TitleModificationModel
	6,  // 1: anipj.content.v1dev.TitleUpdateRequest.model:type_name -> anipj.content.v1dev.TitleModificationModel
	18, // 2: anipj.content.v1dev.TitleUpdateRequest.field_mask:type_name -> google.protobuf.FieldMask
	19, // 3: anipj.content.v1dev.TitleUpdateRequest.merge_options:type_name -> anipj.protobuf.field_mask.MergeOptions
	20, // 4: anipj.content.v1dev.TitleModificationModel.names:type_name -> anipj.content.v1dev.NameVariant
	21, // 5: anipj.content.v1dev.TitleModificationModel.production_status:type_name -> anipj.content.v1dev.ProductionStatus
	22, // 6: anipj.content.v1dev.TitleModificationModel.announced_at:type_name -> google.protobuf.Timestamp
	22, // 7: anipj.content.v1dev.TitleModificationModel.released_at:type_name -> google.protobuf.Timestamp
	8,  // 8: anipj.content.v1dev.TitleModificationModel.external_resources:type_name -> anipj.content.v1dev.TitleExternalResource
	9,  // 9: anipj.content.v1dev.TitleModificationModel.characters:type_name -> anipj.content.v1dev.CharacterInTitle
	10, // 10: anipj.content.v1dev.TitleModificationModel.persons:type_name -> anipj.content.v1dev.PersonRoleInTitle
	11, // 11: anipj.content.v1dev.TitleModificationModel.studios:type_name -> anipj.content.v1dev.StudioRoleInTitle
	12, // 12: anipj.content.v1dev.TitleModificationModel.title_relations:type_name -> anipj.content.v1dev.RelatedTitle
	14, // 13: anipj.content.v1dev.TitleModificationModel.anime:type_name -> anipj.content.v1dev.TitleModificationModel.Anime
	20, // 14: anipj.content.v1dev.Title.names:type_name -> anipj.content.v1dev.NameVariant
	21, // 15: anipj.content.v1dev.Title.production_status:type_name -> anipj.content.v1dev.ProductionStatus
	22, // 16: anipj.content.v1dev.Title.announced_at:type_name -> google.protobuf.Timestamp
	22, // 17: anipj.content.v1dev.Title.released_at:type_name -> google.protobuf.Timestamp
	8,  // 18: anipj.content.v1dev.Title.external_resources:type_name -> anipj.content.v1dev.TitleExternalResource
	9,  // 19: anipj.content.v1dev.Title.characters:type_name -> anipj.content.v1dev.CharacterInTitle
	10, // 20: anipj.content.v1dev.Title.persons:type_name -> anipj.content.v1dev.PersonRoleInTitle
	11, // 21: anipj.content.v1dev.Title.studios:type_name -> anipj.content.v1dev.StudioRoleInTitle
	12, // 22: anipj.content.v1dev.Title.title_relations:type_name -> anipj.content.v1dev.RelatedTitle
	23, // 23: anipj.content.v1dev.Title.tags:type_name -> anipj.content.v1dev.TagOnEntity
	13, // 24: anipj.content.v1dev.Title.statistics:type_name -> anipj.content.v1dev.TitleStatistics
	24, // 25: anipj.content.v1dev.Title.pictures:type_name -> anipj.content.v1dev.Picture
	15, // 26: anipj.content.v1dev.Title.anime:type_name -> anipj.content.v1dev.Title.Anime
	16, // 27: anipj.content.v1dev.Title.manga:type_name -> anipj.content.v1dev.Title.Manga
	0,  // 28: anipj.content.v1dev.RelatedTitle.type:type_name -> anipj.content.v1dev.RelatedTitle.Type
	17, // 29: anipj.content.v1dev.TitleStatistics.rates_statistics:type_name -> anipj.content.v1dev.TitleStatistics.RateStatistic
	25, // 30: anipj.content.v1dev.TitleModificationModel.Anime.kind:type_name -> anipj.content.v1dev.AnimeKind
	25, // 31: anipj.content.v1dev.Title.Anime.kind:type_name -> anipj.content.v1dev.AnimeKind
	1,  // 32: anipj.content.v1dev.TitleManager.Create:input_type -> anipj.content.v1dev.TitleCreateRequest
	3,  // 33: anipj.content.v1dev.TitleManager.Update:input_type -> anipj.content.v1dev.TitleUpdateRequest
	4,  // 34: anipj.content.v1dev.TitleManager.SetExternalResourceForRanking:input_type -> anipj.content.v1dev.SetExternalResourceForRankingRequest
	5,  // 35: anipj.content.v1dev.TitleManager.Rate:input_type -> anipj.content.v1dev.RateTitleRequest
	2,  // 36: anipj.content.v1dev.TitleManager.Create:output_type -> anipj.content.v1dev.TitleCreateResponse
	26, // 37: anipj.content.v1dev.TitleManager.Update:output_type -> google.protobuf.Empty
	26, // 38: anipj.content.v1dev.TitleManager.SetExternalResourceForRanking:output_type -> google.protobuf.Empty
	26, // 39: anipj.content.v1dev.TitleManager.Rate:output_type -> google.protobuf.Empty
	36, // [36:40] is the sub-list for method output_type
	32, // [32:36] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_anipj_content_title_proto_init() }
func file_anipj_content_title_proto_init() {
	if File_anipj_content_title_proto != nil {
		return
	}
	file_anipj_content_common_proto_init()
	file_anipj_content_tags_proto_init()
	file_anipj_content_picture_proto_init()
	file_anipj_content_title_proto_msgTypes[4].OneofWrappers = []any{}
	file_anipj_content_title_proto_msgTypes[5].OneofWrappers = []any{
		(*TitleModificationModel_Anime_)(nil),
	}
	file_anipj_content_title_proto_msgTypes[6].OneofWrappers = []any{
		(*Title_Anime_)(nil),
		(*Title_Manga_)(nil),
	}
	file_anipj_content_title_proto_msgTypes[7].OneofWrappers = []any{}
	file_anipj_content_title_proto_msgTypes[8].OneofWrappers = []any{}
	file_anipj_content_title_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anipj_content_title_proto_rawDesc), len(file_anipj_content_title_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anipj_content_title_proto_goTypes,
		DependencyIndexes: file_anipj_content_title_proto_depIdxs,
		EnumInfos:         file_anipj_content_title_proto_enumTypes,
		MessageInfos:      file_anipj_content_title_proto_msgTypes,
	}.Build()
	File_anipj_content_title_proto = out.File
	file_anipj_content_title_proto_goTypes = nil
	file_anipj_content_title_proto_depIdxs = nil
}
