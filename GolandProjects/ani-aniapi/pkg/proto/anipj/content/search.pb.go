// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: anipj/content/search.proto

package content

import (
	_ "anipj/protobuf/search"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TitleSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch) Reset() {
	*x = TitleSearch{}
	mi := &file_anipj_content_search_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch) ProtoMessage() {}

func (x *TitleSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch.ProtoReflect.Descriptor instead.
func (*TitleSearch) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0}
}

type BaseSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseSearch) Reset() {
	*x = BaseSearch{}
	mi := &file_anipj_content_search_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSearch) ProtoMessage() {}

func (x *BaseSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSearch.ProtoReflect.Descriptor instead.
func (*BaseSearch) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{1}
}

type TagSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSearch) Reset() {
	*x = TagSearch{}
	mi := &file_anipj_content_search_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSearch) ProtoMessage() {}

func (x *TagSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSearch.ProtoReflect.Descriptor instead.
func (*TagSearch) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{2}
}

type TitleSearch_Spec struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FranchiseId      int32                  `protobuf:"varint,2,opt,name=franchise_id,json=franchiseId,proto3" json:"franchise_id,omitempty"`
	ProductionStatus ProductionStatus       `protobuf:"varint,3,opt,name=production_status,json=productionStatus,proto3,enum=anipj.content.v1dev.ProductionStatus" json:"production_status,omitempty"`
	AnimeKind        AnimeKind              `protobuf:"varint,4,opt,name=anime_kind,json=animeKind,proto3,enum=anipj.content.v1dev.AnimeKind" json:"anime_kind,omitempty"`
	ReleasedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty"`
	AnyTag           string                 `protobuf:"bytes,6,opt,name=any_tag,json=anyTag,proto3" json:"any_tag,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TitleSearch_Spec) Reset() {
	*x = TitleSearch_Spec{}
	mi := &file_anipj_content_search_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_Spec) ProtoMessage() {}

func (x *TitleSearch_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_Spec.ProtoReflect.Descriptor instead.
func (*TitleSearch_Spec) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TitleSearch_Spec) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TitleSearch_Spec) GetFranchiseId() int32 {
	if x != nil {
		return x.FranchiseId
	}
	return 0
}

func (x *TitleSearch_Spec) GetProductionStatus() ProductionStatus {
	if x != nil {
		return x.ProductionStatus
	}
	return ProductionStatus_PRODUCTION_STATUS_UNSPECIFIED
}

func (x *TitleSearch_Spec) GetAnimeKind() AnimeKind {
	if x != nil {
		return x.AnimeKind
	}
	return AnimeKind_ANIME_KIND_UNSPECIFIED
}

func (x *TitleSearch_Spec) GetReleasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *TitleSearch_Spec) GetAnyTag() string {
	if x != nil {
		return x.AnyTag
	}
	return ""
}

type TitleSearch_ResultModel struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FranchiseId         int32                  `protobuf:"varint,3,opt,name=franchise_id,json=franchiseId,proto3" json:"franchise_id,omitempty"`
	Names               []*NameVariant         `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Description         *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AudienceRestriction *string                `protobuf:"bytes,6,opt,name=audience_restriction,json=audienceRestriction,proto3,oneof" json:"audience_restriction,omitempty"` // возрастное ограничение (G, PG, PG-13, R, NC-17, R+, RX)
	ProductionStatus    ProductionStatus       `protobuf:"varint,7,opt,name=production_status,json=productionStatus,proto3,enum=anipj.content.v1dev.ProductionStatus" json:"production_status,omitempty"`
	AnnouncedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=announced_at,json=announcedAt,proto3,oneof" json:"announced_at,omitempty"`
	ReleasedAt          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=released_at,json=releasedAt,proto3,oneof" json:"released_at,omitempty"`
	Tags                []*TagOnEntity         `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Statistics          *TitleStatistics       `protobuf:"bytes,16,opt,name=statistics,proto3" json:"statistics,omitempty"`
	PrimaryPicture      *Picture               `protobuf:"bytes,17,opt,name=primary_picture,json=primaryPicture,proto3,oneof" json:"primary_picture,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*TitleSearch_ResultModel_Anime_
	//	*TitleSearch_ResultModel_Manga_
	Type          isTitleSearch_ResultModel_Type `protobuf_oneof:"Type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch_ResultModel) Reset() {
	*x = TitleSearch_ResultModel{}
	mi := &file_anipj_content_search_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_ResultModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_ResultModel) ProtoMessage() {}

func (x *TitleSearch_ResultModel) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_ResultModel.ProtoReflect.Descriptor instead.
func (*TitleSearch_ResultModel) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TitleSearch_ResultModel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TitleSearch_ResultModel) GetFranchiseId() int32 {
	if x != nil {
		return x.FranchiseId
	}
	return 0
}

func (x *TitleSearch_ResultModel) GetNames() []*NameVariant {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TitleSearch_ResultModel) GetAudienceRestriction() string {
	if x != nil && x.AudienceRestriction != nil {
		return *x.AudienceRestriction
	}
	return ""
}

func (x *TitleSearch_ResultModel) GetProductionStatus() ProductionStatus {
	if x != nil {
		return x.ProductionStatus
	}
	return ProductionStatus_PRODUCTION_STATUS_UNSPECIFIED
}

func (x *TitleSearch_ResultModel) GetAnnouncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnnouncedAt
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetReleasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetTags() []*TagOnEntity {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetStatistics() *TitleStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetPrimaryPicture() *Picture {
	if x != nil {
		return x.PrimaryPicture
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetType() isTitleSearch_ResultModel_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetAnime() *TitleSearch_ResultModel_Anime {
	if x != nil {
		if x, ok := x.Type.(*TitleSearch_ResultModel_Anime_); ok {
			return x.Anime
		}
	}
	return nil
}

func (x *TitleSearch_ResultModel) GetManga() *TitleSearch_ResultModel_Manga {
	if x != nil {
		if x, ok := x.Type.(*TitleSearch_ResultModel_Manga_); ok {
			return x.Manga
		}
	}
	return nil
}

type isTitleSearch_ResultModel_Type interface {
	isTitleSearch_ResultModel_Type()
}

type TitleSearch_ResultModel_Anime_ struct {
	Anime *TitleSearch_ResultModel_Anime `protobuf:"bytes,101,opt,name=anime,proto3,oneof"`
}

type TitleSearch_ResultModel_Manga_ struct {
	Manga *TitleSearch_ResultModel_Manga `protobuf:"bytes,102,opt,name=manga,proto3,oneof"`
}

func (*TitleSearch_ResultModel_Anime_) isTitleSearch_ResultModel_Type() {}

func (*TitleSearch_ResultModel_Manga_) isTitleSearch_ResultModel_Type() {}

type TitleSearch_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *TitleSearchFilter     `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paging        *TitleSearchPaging     `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch_Request) Reset() {
	*x = TitleSearch_Request{}
	mi := &file_anipj_content_search_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_Request) ProtoMessage() {}

func (x *TitleSearch_Request) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_Request.ProtoReflect.Descriptor instead.
func (*TitleSearch_Request) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TitleSearch_Request) GetFilter() *TitleSearchFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TitleSearch_Request) GetPaging() *TitleSearchPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type TitleSearch_Response struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Model         *TitleSearch_ResultModel              `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	After         *TitleSearchPaging_Cursor_AfterRecord `protobuf:"bytes,2,opt,name=after,proto3,oneof" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch_Response) Reset() {
	*x = TitleSearch_Response{}
	mi := &file_anipj_content_search_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_Response) ProtoMessage() {}

func (x *TitleSearch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_Response.ProtoReflect.Descriptor instead.
func (*TitleSearch_Response) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TitleSearch_Response) GetModel() *TitleSearch_ResultModel {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *TitleSearch_Response) GetAfter() *TitleSearchPaging_Cursor_AfterRecord {
	if x != nil {
		return x.After
	}
	return nil
}

type TitleSearch_ResultModel_Anime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          AnimeKind              `protobuf:"varint,1,opt,name=kind,proto3,enum=anipj.content.v1dev.AnimeKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch_ResultModel_Anime) Reset() {
	*x = TitleSearch_ResultModel_Anime{}
	mi := &file_anipj_content_search_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_ResultModel_Anime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_ResultModel_Anime) ProtoMessage() {}

func (x *TitleSearch_ResultModel_Anime) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_ResultModel_Anime.ProtoReflect.Descriptor instead.
func (*TitleSearch_ResultModel_Anime) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TitleSearch_ResultModel_Anime) GetKind() AnimeKind {
	if x != nil {
		return x.Kind
	}
	return AnimeKind_ANIME_KIND_UNSPECIFIED
}

type TitleSearch_ResultModel_Manga struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleSearch_ResultModel_Manga) Reset() {
	*x = TitleSearch_ResultModel_Manga{}
	mi := &file_anipj_content_search_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleSearch_ResultModel_Manga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleSearch_ResultModel_Manga) ProtoMessage() {}

func (x *TitleSearch_ResultModel_Manga) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleSearch_ResultModel_Manga.ProtoReflect.Descriptor instead.
func (*TitleSearch_ResultModel_Manga) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{0, 1, 1}
}

type BaseSearch_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AnyTag        string                 `protobuf:"bytes,2,opt,name=any_tag,json=anyTag,proto3" json:"any_tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseSearch_Spec) Reset() {
	*x = BaseSearch_Spec{}
	mi := &file_anipj_content_search_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseSearch_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSearch_Spec) ProtoMessage() {}

func (x *BaseSearch_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSearch_Spec.ProtoReflect.Descriptor instead.
func (*BaseSearch_Spec) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BaseSearch_Spec) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseSearch_Spec) GetAnyTag() string {
	if x != nil {
		return x.AnyTag
	}
	return ""
}

type BaseSearch_ResultModel struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Names          []*NameVariant         `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Description    *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	PrimaryPicture *Picture               `protobuf:"bytes,4,opt,name=primary_picture,json=primaryPicture,proto3,oneof" json:"primary_picture,omitempty"`
	Tags           []*TagOnEntity         `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BaseSearch_ResultModel) Reset() {
	*x = BaseSearch_ResultModel{}
	mi := &file_anipj_content_search_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseSearch_ResultModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSearch_ResultModel) ProtoMessage() {}

func (x *BaseSearch_ResultModel) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSearch_ResultModel.ProtoReflect.Descriptor instead.
func (*BaseSearch_ResultModel) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BaseSearch_ResultModel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseSearch_ResultModel) GetNames() []*NameVariant {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *BaseSearch_ResultModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BaseSearch_ResultModel) GetPrimaryPicture() *Picture {
	if x != nil {
		return x.PrimaryPicture
	}
	return nil
}

func (x *BaseSearch_ResultModel) GetTags() []*TagOnEntity {
	if x != nil {
		return x.Tags
	}
	return nil
}

type BaseSearch_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *BaseSearchFilter      `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paging        *BaseSearchPaging      `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseSearch_Request) Reset() {
	*x = BaseSearch_Request{}
	mi := &file_anipj_content_search_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseSearch_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSearch_Request) ProtoMessage() {}

func (x *BaseSearch_Request) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSearch_Request.ProtoReflect.Descriptor instead.
func (*BaseSearch_Request) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{1, 2}
}

func (x *BaseSearch_Request) GetFilter() *BaseSearchFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BaseSearch_Request) GetPaging() *BaseSearchPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type BaseSearch_Response struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Model         *BaseSearch_ResultModel              `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	After         *BaseSearchPaging_Cursor_AfterRecord `protobuf:"bytes,2,opt,name=after,proto3,oneof" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseSearch_Response) Reset() {
	*x = BaseSearch_Response{}
	mi := &file_anipj_content_search_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseSearch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseSearch_Response) ProtoMessage() {}

func (x *BaseSearch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseSearch_Response.ProtoReflect.Descriptor instead.
func (*BaseSearch_Response) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{1, 3}
}

func (x *BaseSearch_Response) GetModel() *BaseSearch_ResultModel {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *BaseSearch_Response) GetAfter() *BaseSearchPaging_Cursor_AfterRecord {
	if x != nil {
		return x.After
	}
	return nil
}

type TagSearch_Spec struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SystemOnly bool                   `protobuf:"varint,2,opt,name=system_only,json=systemOnly,proto3" json:"system_only,omitempty"`
	// Выбрать теги, релевантные для этих типов сущностей.
	AnyEntityType EntityLink_Type `protobuf:"varint,3,opt,name=any_entity_type,json=anyEntityType,proto3,enum=anipj.content.v1dev.EntityLink_Type" json:"any_entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSearch_Spec) Reset() {
	*x = TagSearch_Spec{}
	mi := &file_anipj_content_search_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSearch_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSearch_Spec) ProtoMessage() {}

func (x *TagSearch_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSearch_Spec.ProtoReflect.Descriptor instead.
func (*TagSearch_Spec) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TagSearch_Spec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagSearch_Spec) GetSystemOnly() bool {
	if x != nil {
		return x.SystemOnly
	}
	return false
}

func (x *TagSearch_Spec) GetAnyEntityType() EntityLink_Type {
	if x != nil {
		return x.AnyEntityType
	}
	return EntityLink_UNSPECIFIED
}

type TagSearch_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *TagSearchFilter       `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Paging        *TagSearchPaging       `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSearch_Request) Reset() {
	*x = TagSearch_Request{}
	mi := &file_anipj_content_search_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSearch_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSearch_Request) ProtoMessage() {}

func (x *TagSearch_Request) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSearch_Request.ProtoReflect.Descriptor instead.
func (*TagSearch_Request) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{2, 1}
}

func (x *TagSearch_Request) GetFilter() *TagSearchFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TagSearch_Request) GetPaging() *TagSearchPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type TagSearch_Response struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Model         *Tag                                `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	After         *TagSearchPaging_Cursor_AfterRecord `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSearch_Response) Reset() {
	*x = TagSearch_Response{}
	mi := &file_anipj_content_search_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSearch_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSearch_Response) ProtoMessage() {}

func (x *TagSearch_Response) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_search_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSearch_Response.ProtoReflect.Descriptor instead.
func (*TagSearch_Response) Descriptor() ([]byte, []int) {
	return file_anipj_content_search_proto_rawDescGZIP(), []int{2, 2}
}

func (x *TagSearch_Response) GetModel() *Tag {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *TagSearch_Response) GetAfter() *TagSearchPaging_Cursor_AfterRecord {
	if x != nil {
		return x.After
	}
	return nil
}

var File_anipj_content_search_proto protoreflect.FileDescriptor

var file_anipj_content_search_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x1a, 0x19, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x0c, 0x0a, 0x0b, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0xdd, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0xd2, 0x3e, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6e,
	0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x3e, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x3a, 0x2b, 0xd2, 0x3e, 0x28, 0x08,
	0x01, 0x10, 0x01, 0x1a, 0x22, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xbd, 0x07, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0a, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x54, 0x61, 0x67, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x05,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e,
	0x67, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x1a, 0x3b, 0x0a, 0x05, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x0a, 0x05, 0x4d, 0x61, 0x6e, 0x67,
	0x61, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x1a, 0xae, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x22, 0xcf, 0x05, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x1a, 0x63, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x6e, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x3e,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x3a, 0x2b, 0xd2, 0x3e, 0x28,
	0x08, 0x01, 0x10, 0x01, 0x1a, 0x22, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x87, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0xac, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xdb, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x1a, 0xb9, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x53,
	0x0a, 0x0f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x05, 0xd2,
	0x3e, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x2b, 0xd2, 0x3e, 0x28, 0x08, 0x01, 0x10, 0x01, 0x1a, 0x22, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x1a, 0x85, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69,
	0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76,
	0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x89, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x32, 0xef, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x61,
	0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64,
	0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x63, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x27, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x69,
	0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x61, 0x67, 0x12, 0x26, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x29, 0x5a, 0x0d, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x17, 0x41, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_anipj_content_search_proto_rawDescOnce sync.Once
	file_anipj_content_search_proto_rawDescData []byte
)

func file_anipj_content_search_proto_rawDescGZIP() []byte {
	file_anipj_content_search_proto_rawDescOnce.Do(func() {
		file_anipj_content_search_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anipj_content_search_proto_rawDesc), len(file_anipj_content_search_proto_rawDesc)))
	})
	return file_anipj_content_search_proto_rawDescData
}

var file_anipj_content_search_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_anipj_content_search_proto_goTypes = []any{
	(*TitleSearch)(nil),                          // 0: anipj.content.v1dev.TitleSearch
	(*BaseSearch)(nil),                           // 1: anipj.content.v1dev.BaseSearch
	(*TagSearch)(nil),                            // 2: anipj.content.v1dev.TagSearch
	(*TitleSearch_Spec)(nil),                     // 3: anipj.content.v1dev.TitleSearch.Spec
	(*TitleSearch_ResultModel)(nil),              // 4: anipj.content.v1dev.TitleSearch.ResultModel
	(*TitleSearch_Request)(nil),                  // 5: anipj.content.v1dev.TitleSearch.Request
	(*TitleSearch_Response)(nil),                 // 6: anipj.content.v1dev.TitleSearch.Response
	(*TitleSearch_ResultModel_Anime)(nil),        // 7: anipj.content.v1dev.TitleSearch.ResultModel.Anime
	(*TitleSearch_ResultModel_Manga)(nil),        // 8: anipj.content.v1dev.TitleSearch.ResultModel.Manga
	(*BaseSearch_Spec)(nil),                      // 9: anipj.content.v1dev.BaseSearch.Spec
	(*BaseSearch_ResultModel)(nil),               // 10: anipj.content.v1dev.BaseSearch.ResultModel
	(*BaseSearch_Request)(nil),                   // 11: anipj.content.v1dev.BaseSearch.Request
	(*BaseSearch_Response)(nil),                  // 12: anipj.content.v1dev.BaseSearch.Response
	(*TagSearch_Spec)(nil),                       // 13: anipj.content.v1dev.TagSearch.Spec
	(*TagSearch_Request)(nil),                    // 14: anipj.content.v1dev.TagSearch.Request
	(*TagSearch_Response)(nil),                   // 15: anipj.content.v1dev.TagSearch.Response
	(ProductionStatus)(0),                        // 16: anipj.content.v1dev.ProductionStatus
	(AnimeKind)(0),                               // 17: anipj.content.v1dev.AnimeKind
	(*timestamppb.Timestamp)(nil),                // 18: google.protobuf.Timestamp
	(*NameVariant)(nil),                          // 19: anipj.content.v1dev.NameVariant
	(*TagOnEntity)(nil),                          // 20: anipj.content.v1dev.TagOnEntity
	(*TitleStatistics)(nil),                      // 21: anipj.content.v1dev.TitleStatistics
	(*Picture)(nil),                              // 22: anipj.content.v1dev.Picture
	(*TitleSearchFilter)(nil),                    // 23: anipj.content.v1dev.TitleSearchFilter
	(*TitleSearchPaging)(nil),                    // 24: anipj.content.v1dev.TitleSearchPaging
	(*TitleSearchPaging_Cursor_AfterRecord)(nil), // 25: anipj.content.v1dev.TitleSearchPaging.Cursor.AfterRecord
	(*BaseSearchFilter)(nil),                     // 26: anipj.content.v1dev.BaseSearchFilter
	(*BaseSearchPaging)(nil),                     // 27: anipj.content.v1dev.BaseSearchPaging
	(*BaseSearchPaging_Cursor_AfterRecord)(nil),  // 28: anipj.content.v1dev.BaseSearchPaging.Cursor.AfterRecord
	(EntityLink_Type)(0),                         // 29: anipj.content.v1dev.EntityLink.Type
	(*TagSearchFilter)(nil),                      // 30: anipj.content.v1dev.TagSearchFilter
	(*TagSearchPaging)(nil),                      // 31: anipj.content.v1dev.TagSearchPaging
	(*Tag)(nil),                                  // 32: anipj.content.v1dev.Tag
	(*TagSearchPaging_Cursor_AfterRecord)(nil),   // 33: anipj.content.v1dev.TagSearchPaging.Cursor.AfterRecord
}
var file_anipj_content_search_proto_depIdxs = []int32{
	16, // 0: anipj.content.v1dev.TitleSearch.Spec.production_status:type_name -> anipj.content.v1dev.ProductionStatus
	17, // 1: anipj.content.v1dev.TitleSearch.Spec.anime_kind:type_name -> anipj.content.v1dev.AnimeKind
	18, // 2: anipj.content.v1dev.TitleSearch.Spec.released_at:type_name -> google.protobuf.Timestamp
	19, // 3: anipj.content.v1dev.TitleSearch.ResultModel.names:type_name -> anipj.content.v1dev.NameVariant
	16, // 4: anipj.content.v1dev.TitleSearch.ResultModel.production_status:type_name -> anipj.content.v1dev.ProductionStatus
	18, // 5: anipj.content.v1dev.TitleSearch.ResultModel.announced_at:type_name -> google.protobuf.Timestamp
	18, // 6: anipj.content.v1dev.TitleSearch.ResultModel.released_at:type_name -> google.protobuf.Timestamp
	20, // 7: anipj.content.v1dev.TitleSearch.ResultModel.tags:type_name -> anipj.content.v1dev.TagOnEntity
	21, // 8: anipj.content.v1dev.TitleSearch.ResultModel.statistics:type_name -> anipj.content.v1dev.TitleStatistics
	22, // 9: anipj.content.v1dev.TitleSearch.ResultModel.primary_picture:type_name -> anipj.content.v1dev.Picture
	7,  // 10: anipj.content.v1dev.TitleSearch.ResultModel.anime:type_name -> anipj.content.v1dev.TitleSearch.ResultModel.Anime
	8,  // 11: anipj.content.v1dev.TitleSearch.ResultModel.manga:type_name -> anipj.content.v1dev.TitleSearch.ResultModel.Manga
	23, // 12: anipj.content.v1dev.TitleSearch.Request.filter:type_name -> anipj.content.v1dev.TitleSearchFilter
	24, // 13: anipj.content.v1dev.TitleSearch.Request.paging:type_name -> anipj.content.v1dev.TitleSearchPaging
	4,  // 14: anipj.content.v1dev.TitleSearch.Response.model:type_name -> anipj.content.v1dev.TitleSearch.ResultModel
	25, // 15: anipj.content.v1dev.TitleSearch.Response.after:type_name -> anipj.content.v1dev.TitleSearchPaging.Cursor.AfterRecord
	17, // 16: anipj.content.v1dev.TitleSearch.ResultModel.Anime.kind:type_name -> anipj.content.v1dev.AnimeKind
	19, // 17: anipj.content.v1dev.BaseSearch.ResultModel.names:type_name -> anipj.content.v1dev.NameVariant
	22, // 18: anipj.content.v1dev.BaseSearch.ResultModel.primary_picture:type_name -> anipj.content.v1dev.Picture
	20, // 19: anipj.content.v1dev.BaseSearch.ResultModel.tags:type_name -> anipj.content.v1dev.TagOnEntity
	26, // 20: anipj.content.v1dev.BaseSearch.Request.filter:type_name -> anipj.content.v1dev.BaseSearchFilter
	27, // 21: anipj.content.v1dev.BaseSearch.Request.paging:type_name -> anipj.content.v1dev.BaseSearchPaging
	10, // 22: anipj.content.v1dev.BaseSearch.Response.model:type_name -> anipj.content.v1dev.BaseSearch.ResultModel
	28, // 23: anipj.content.v1dev.BaseSearch.Response.after:type_name -> anipj.content.v1dev.BaseSearchPaging.Cursor.AfterRecord
	29, // 24: anipj.content.v1dev.TagSearch.Spec.any_entity_type:type_name -> anipj.content.v1dev.EntityLink.Type
	30, // 25: anipj.content.v1dev.TagSearch.Request.filter:type_name -> anipj.content.v1dev.TagSearchFilter
	31, // 26: anipj.content.v1dev.TagSearch.Request.paging:type_name -> anipj.content.v1dev.TagSearchPaging
	32, // 27: anipj.content.v1dev.TagSearch.Response.model:type_name -> anipj.content.v1dev.Tag
	33, // 28: anipj.content.v1dev.TagSearch.Response.after:type_name -> anipj.content.v1dev.TagSearchPaging.Cursor.AfterRecord
	5,  // 29: anipj.content.v1dev.SearchService.SearchTitle:input_type -> anipj.content.v1dev.TitleSearch.Request
	11, // 30: anipj.content.v1dev.SearchService.SearchFranchise:input_type -> anipj.content.v1dev.BaseSearch.Request
	11, // 31: anipj.content.v1dev.SearchService.SearchCharacter:input_type -> anipj.content.v1dev.BaseSearch.Request
	11, // 32: anipj.content.v1dev.SearchService.SearchPerson:input_type -> anipj.content.v1dev.BaseSearch.Request
	11, // 33: anipj.content.v1dev.SearchService.SearchStudio:input_type -> anipj.content.v1dev.BaseSearch.Request
	14, // 34: anipj.content.v1dev.SearchService.SearchTag:input_type -> anipj.content.v1dev.TagSearch.Request
	6,  // 35: anipj.content.v1dev.SearchService.SearchTitle:output_type -> anipj.content.v1dev.TitleSearch.Response
	12, // 36: anipj.content.v1dev.SearchService.SearchFranchise:output_type -> anipj.content.v1dev.BaseSearch.Response
	12, // 37: anipj.content.v1dev.SearchService.SearchCharacter:output_type -> anipj.content.v1dev.BaseSearch.Response
	12, // 38: anipj.content.v1dev.SearchService.SearchPerson:output_type -> anipj.content.v1dev.BaseSearch.Response
	12, // 39: anipj.content.v1dev.SearchService.SearchStudio:output_type -> anipj.content.v1dev.BaseSearch.Response
	15, // 40: anipj.content.v1dev.SearchService.SearchTag:output_type -> anipj.content.v1dev.TagSearch.Response
	35, // [35:41] is the sub-list for method output_type
	29, // [29:35] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_anipj_content_search_proto_init() }
func file_anipj_content_search_proto_init() {
	if File_anipj_content_search_proto != nil {
		return
	}
	file_anipj_content_title_proto_init()
	file_anipj_content_tags_proto_init()
	file_anipj_content_picture_proto_init()
	file_anipj_content_common_proto_init()
	file_anipj_content_search_search_proto_init()
	file_anipj_content_search_proto_msgTypes[4].OneofWrappers = []any{
		(*TitleSearch_ResultModel_Anime_)(nil),
		(*TitleSearch_ResultModel_Manga_)(nil),
	}
	file_anipj_content_search_proto_msgTypes[6].OneofWrappers = []any{}
	file_anipj_content_search_proto_msgTypes[10].OneofWrappers = []any{}
	file_anipj_content_search_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anipj_content_search_proto_rawDesc), len(file_anipj_content_search_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anipj_content_search_proto_goTypes,
		DependencyIndexes: file_anipj_content_search_proto_depIdxs,
		MessageInfos:      file_anipj_content_search_proto_msgTypes,
	}.Build()
	File_anipj_content_search_proto = out.File
	file_anipj_content_search_proto_goTypes = nil
	file_anipj_content_search_proto_depIdxs = nil
}
