// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: anipj/content/search.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchService_SearchTitle_FullMethodName     = "/anipj.content.v1dev.SearchService/SearchTitle"
	SearchService_SearchFranchise_FullMethodName = "/anipj.content.v1dev.SearchService/SearchFranchise"
	SearchService_SearchCharacter_FullMethodName = "/anipj.content.v1dev.SearchService/SearchCharacter"
	SearchService_SearchPerson_FullMethodName    = "/anipj.content.v1dev.SearchService/SearchPerson"
	SearchService_SearchStudio_FullMethodName    = "/anipj.content.v1dev.SearchService/SearchStudio"
	SearchService_SearchTag_FullMethodName       = "/anipj.content.v1dev.SearchService/SearchTag"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	SearchTitle(ctx context.Context, in *TitleSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TitleSearch_Response], error)
	SearchFranchise(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error)
	SearchCharacter(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error)
	SearchPerson(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error)
	SearchStudio(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error)
	SearchTag(ctx context.Context, in *TagSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagSearch_Response], error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) SearchTitle(ctx context.Context, in *TitleSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TitleSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[0], SearchService_SearchTitle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TitleSearch_Request, TitleSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchTitleClient = grpc.ServerStreamingClient[TitleSearch_Response]

func (c *searchServiceClient) SearchFranchise(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[1], SearchService_SearchFranchise_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BaseSearch_Request, BaseSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchFranchiseClient = grpc.ServerStreamingClient[BaseSearch_Response]

func (c *searchServiceClient) SearchCharacter(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[2], SearchService_SearchCharacter_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BaseSearch_Request, BaseSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchCharacterClient = grpc.ServerStreamingClient[BaseSearch_Response]

func (c *searchServiceClient) SearchPerson(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[3], SearchService_SearchPerson_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BaseSearch_Request, BaseSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchPersonClient = grpc.ServerStreamingClient[BaseSearch_Response]

func (c *searchServiceClient) SearchStudio(ctx context.Context, in *BaseSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[4], SearchService_SearchStudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BaseSearch_Request, BaseSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchStudioClient = grpc.ServerStreamingClient[BaseSearch_Response]

func (c *searchServiceClient) SearchTag(ctx context.Context, in *TagSearch_Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TagSearch_Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[5], SearchService_SearchTag_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TagSearch_Request, TagSearch_Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchTagClient = grpc.ServerStreamingClient[TagSearch_Response]

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility.
type SearchServiceServer interface {
	SearchTitle(*TitleSearch_Request, grpc.ServerStreamingServer[TitleSearch_Response]) error
	SearchFranchise(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error
	SearchCharacter(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error
	SearchPerson(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error
	SearchStudio(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error
	SearchTag(*TagSearch_Request, grpc.ServerStreamingServer[TagSearch_Response]) error
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServiceServer struct{}

func (UnimplementedSearchServiceServer) SearchTitle(*TitleSearch_Request, grpc.ServerStreamingServer[TitleSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchTitle not implemented")
}
func (UnimplementedSearchServiceServer) SearchFranchise(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchFranchise not implemented")
}
func (UnimplementedSearchServiceServer) SearchCharacter(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchCharacter not implemented")
}
func (UnimplementedSearchServiceServer) SearchPerson(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchPerson not implemented")
}
func (UnimplementedSearchServiceServer) SearchStudio(*BaseSearch_Request, grpc.ServerStreamingServer[BaseSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchStudio not implemented")
}
func (UnimplementedSearchServiceServer) SearchTag(*TagSearch_Request, grpc.ServerStreamingServer[TagSearch_Response]) error {
	return status.Errorf(codes.Unimplemented, "method SearchTag not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}
func (UnimplementedSearchServiceServer) testEmbeddedByValue()                       {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_SearchTitle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TitleSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchTitle(m, &grpc.GenericServerStream[TitleSearch_Request, TitleSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchTitleServer = grpc.ServerStreamingServer[TitleSearch_Response]

func _SearchService_SearchFranchise_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchFranchise(m, &grpc.GenericServerStream[BaseSearch_Request, BaseSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchFranchiseServer = grpc.ServerStreamingServer[BaseSearch_Response]

func _SearchService_SearchCharacter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchCharacter(m, &grpc.GenericServerStream[BaseSearch_Request, BaseSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchCharacterServer = grpc.ServerStreamingServer[BaseSearch_Response]

func _SearchService_SearchPerson_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchPerson(m, &grpc.GenericServerStream[BaseSearch_Request, BaseSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchPersonServer = grpc.ServerStreamingServer[BaseSearch_Response]

func _SearchService_SearchStudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BaseSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchStudio(m, &grpc.GenericServerStream[BaseSearch_Request, BaseSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchStudioServer = grpc.ServerStreamingServer[BaseSearch_Response]

func _SearchService_SearchTag_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagSearch_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchTag(m, &grpc.GenericServerStream[TagSearch_Request, TagSearch_Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearchService_SearchTagServer = grpc.ServerStreamingServer[TagSearch_Response]

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anipj.content.v1dev.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchTitle",
			Handler:       _SearchService_SearchTitle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchFranchise",
			Handler:       _SearchService_SearchFranchise_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchCharacter",
			Handler:       _SearchService_SearchCharacter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchPerson",
			Handler:       _SearchService_SearchPerson_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchStudio",
			Handler:       _SearchService_SearchStudio_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTag",
			Handler:       _SearchService_SearchTag_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "anipj/content/search.proto",
}
