// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: anipj/content/picture.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PictureService_Create_FullMethodName      = "/anipj.content.v1dev.PictureService/Create"
	PictureService_Update_FullMethodName      = "/anipj.content.v1dev.PictureService/Update"
	PictureService_Delete_FullMethodName      = "/anipj.content.v1dev.PictureService/Delete"
	PictureService_GetByEntity_FullMethodName = "/anipj.content.v1dev.PictureService/GetByEntity"
)

// PictureServiceClient is the client API for PictureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PictureServiceClient interface {
	Create(ctx context.Context, in *CreatePictureRequest, opts ...grpc.CallOption) (*CreatePictureResponse, error)
	Update(ctx context.Context, in *UpdatePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeletePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByEntity(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetEntityPicturesRequest, PictureOnEntity], error)
}

type pictureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPictureServiceClient(cc grpc.ClientConnInterface) PictureServiceClient {
	return &pictureServiceClient{cc}
}

func (c *pictureServiceClient) Create(ctx context.Context, in *CreatePictureRequest, opts ...grpc.CallOption) (*CreatePictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePictureResponse)
	err := c.cc.Invoke(ctx, PictureService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) Update(ctx context.Context, in *UpdatePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PictureService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) Delete(ctx context.Context, in *DeletePictureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PictureService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureServiceClient) GetByEntity(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetEntityPicturesRequest, PictureOnEntity], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PictureService_ServiceDesc.Streams[0], PictureService_GetByEntity_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetEntityPicturesRequest, PictureOnEntity]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureService_GetByEntityClient = grpc.BidiStreamingClient[GetEntityPicturesRequest, PictureOnEntity]

// PictureServiceServer is the server API for PictureService service.
// All implementations must embed UnimplementedPictureServiceServer
// for forward compatibility.
type PictureServiceServer interface {
	Create(context.Context, *CreatePictureRequest) (*CreatePictureResponse, error)
	Update(context.Context, *UpdatePictureRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeletePictureRequest) (*emptypb.Empty, error)
	GetByEntity(grpc.BidiStreamingServer[GetEntityPicturesRequest, PictureOnEntity]) error
	mustEmbedUnimplementedPictureServiceServer()
}

// UnimplementedPictureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPictureServiceServer struct{}

func (UnimplementedPictureServiceServer) Create(context.Context, *CreatePictureRequest) (*CreatePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPictureServiceServer) Update(context.Context, *UpdatePictureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPictureServiceServer) Delete(context.Context, *DeletePictureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPictureServiceServer) GetByEntity(grpc.BidiStreamingServer[GetEntityPicturesRequest, PictureOnEntity]) error {
	return status.Errorf(codes.Unimplemented, "method GetByEntity not implemented")
}
func (UnimplementedPictureServiceServer) mustEmbedUnimplementedPictureServiceServer() {}
func (UnimplementedPictureServiceServer) testEmbeddedByValue()                        {}

// UnsafePictureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PictureServiceServer will
// result in compilation errors.
type UnsafePictureServiceServer interface {
	mustEmbedUnimplementedPictureServiceServer()
}

func RegisterPictureServiceServer(s grpc.ServiceRegistrar, srv PictureServiceServer) {
	// If the following call pancis, it indicates UnimplementedPictureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PictureService_ServiceDesc, srv)
}

func _PictureService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).Create(ctx, req.(*CreatePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).Update(ctx, req.(*UpdatePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureServiceServer).Delete(ctx, req.(*DeletePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureService_GetByEntity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PictureServiceServer).GetByEntity(&grpc.GenericServerStream[GetEntityPicturesRequest, PictureOnEntity]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureService_GetByEntityServer = grpc.BidiStreamingServer[GetEntityPicturesRequest, PictureOnEntity]

// PictureService_ServiceDesc is the grpc.ServiceDesc for PictureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PictureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anipj.content.v1dev.PictureService",
	HandlerType: (*PictureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PictureService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PictureService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PictureService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByEntity",
			Handler:       _PictureService_GetByEntity_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "anipj/content/picture.proto",
}
