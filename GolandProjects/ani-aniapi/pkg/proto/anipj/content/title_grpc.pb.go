// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: anipj/content/title.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TitleManager_Create_FullMethodName                        = "/anipj.content.v1dev.TitleManager/Create"
	TitleManager_Update_FullMethodName                        = "/anipj.content.v1dev.TitleManager/Update"
	TitleManager_SetExternalResourceForRanking_FullMethodName = "/anipj.content.v1dev.TitleManager/SetExternalResourceForRanking"
	TitleManager_Rate_FullMethodName                          = "/anipj.content.v1dev.TitleManager/Rate"
)

// TitleManagerClient is the client API for TitleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitleManagerClient interface {
	Create(ctx context.Context, in *TitleCreateRequest, opts ...grpc.CallOption) (*TitleCreateResponse, error)
	Update(ctx context.Context, in *TitleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetExternalResourceForRanking(ctx context.Context, in *SetExternalResourceForRankingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Rate(ctx context.Context, in *RateTitleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type titleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTitleManagerClient(cc grpc.ClientConnInterface) TitleManagerClient {
	return &titleManagerClient{cc}
}

func (c *titleManagerClient) Create(ctx context.Context, in *TitleCreateRequest, opts ...grpc.CallOption) (*TitleCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TitleCreateResponse)
	err := c.cc.Invoke(ctx, TitleManager_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleManagerClient) Update(ctx context.Context, in *TitleUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TitleManager_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleManagerClient) SetExternalResourceForRanking(ctx context.Context, in *SetExternalResourceForRankingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TitleManager_SetExternalResourceForRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleManagerClient) Rate(ctx context.Context, in *RateTitleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TitleManager_Rate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitleManagerServer is the server API for TitleManager service.
// All implementations must embed UnimplementedTitleManagerServer
// for forward compatibility.
type TitleManagerServer interface {
	Create(context.Context, *TitleCreateRequest) (*TitleCreateResponse, error)
	Update(context.Context, *TitleUpdateRequest) (*emptypb.Empty, error)
	SetExternalResourceForRanking(context.Context, *SetExternalResourceForRankingRequest) (*emptypb.Empty, error)
	Rate(context.Context, *RateTitleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTitleManagerServer()
}

// UnimplementedTitleManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTitleManagerServer struct{}

func (UnimplementedTitleManagerServer) Create(context.Context, *TitleCreateRequest) (*TitleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTitleManagerServer) Update(context.Context, *TitleUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTitleManagerServer) SetExternalResourceForRanking(context.Context, *SetExternalResourceForRankingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExternalResourceForRanking not implemented")
}
func (UnimplementedTitleManagerServer) Rate(context.Context, *RateTitleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rate not implemented")
}
func (UnimplementedTitleManagerServer) mustEmbedUnimplementedTitleManagerServer() {}
func (UnimplementedTitleManagerServer) testEmbeddedByValue()                      {}

// UnsafeTitleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitleManagerServer will
// result in compilation errors.
type UnsafeTitleManagerServer interface {
	mustEmbedUnimplementedTitleManagerServer()
}

func RegisterTitleManagerServer(s grpc.ServiceRegistrar, srv TitleManagerServer) {
	// If the following call pancis, it indicates UnimplementedTitleManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TitleManager_ServiceDesc, srv)
}

func _TitleManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleManager_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleManagerServer).Create(ctx, req.(*TitleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleManager_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleManagerServer).Update(ctx, req.(*TitleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleManager_SetExternalResourceForRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExternalResourceForRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleManagerServer).SetExternalResourceForRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleManager_SetExternalResourceForRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleManagerServer).SetExternalResourceForRanking(ctx, req.(*SetExternalResourceForRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleManager_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleManagerServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleManager_Rate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleManagerServer).Rate(ctx, req.(*RateTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TitleManager_ServiceDesc is the grpc.ServiceDesc for TitleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TitleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anipj.content.v1dev.TitleManager",
	HandlerType: (*TitleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TitleManager_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TitleManager_Update_Handler,
		},
		{
			MethodName: "SetExternalResourceForRanking",
			Handler:    _TitleManager_SetExternalResourceForRanking_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _TitleManager_Rate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anipj/content/title.proto",
}
