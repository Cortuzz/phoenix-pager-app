// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: anipj/content/tags.proto

package content

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTagsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Выбрать теги, релевантные для этих типов сущностей.
	// Если не передано ни одного, то фильтрация не применяется.
	EntityTypes   []EntityLink_Type `protobuf:"varint,1,rep,packed,name=entity_types,json=entityTypes,proto3,enum=anipj.content.v1dev.EntityLink_Type" json:"entity_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTagsRequest) Reset() {
	*x = ListTagsRequest{}
	mi := &file_anipj_content_tags_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsRequest) ProtoMessage() {}

func (x *ListTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsRequest.ProtoReflect.Descriptor instead.
func (*ListTagsRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{0}
}

func (x *ListTagsRequest) GetEntityTypes() []EntityLink_Type {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type ListTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []*Tag                 `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTagsResponse) Reset() {
	*x = ListTagsResponse{}
	mi := &file_anipj_content_tags_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsResponse) ProtoMessage() {}

func (x *ListTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsResponse.ProtoReflect.Descriptor instead.
func (*ListTagsResponse) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{1}
}

func (x *ListTagsResponse) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddEntityTagRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TagId      string                 `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	EntityLink *EntityLink            `protobuf:"bytes,2,opt,name=entity_link,json=entityLink,proto3" json:"entity_link,omitempty"`
	// Если не указано, значение берётся из контекста пользователя, который вызвал.
	// Для вызова от лица другого пользователя, требуется соответствующая привилегия.
	UserId        *int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddEntityTagRequest) Reset() {
	*x = AddEntityTagRequest{}
	mi := &file_anipj_content_tags_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddEntityTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEntityTagRequest) ProtoMessage() {}

func (x *AddEntityTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEntityTagRequest.ProtoReflect.Descriptor instead.
func (*AddEntityTagRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{2}
}

func (x *AddEntityTagRequest) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *AddEntityTagRequest) GetEntityLink() *EntityLink {
	if x != nil {
		return x.EntityLink
	}
	return nil
}

func (x *AddEntityTagRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type RemoveEntityTagRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TagId      string                 `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	EntityLink *EntityLink            `protobuf:"bytes,2,opt,name=entity_link,json=entityLink,proto3" json:"entity_link,omitempty"`
	// Если не указано, значение берётся из контекста пользователя, который вызвал.
	// Для вызова от лица другого пользователя, требуется соответствующая привилегия.
	UserId        *int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityTagRequest) Reset() {
	*x = RemoveEntityTagRequest{}
	mi := &file_anipj_content_tags_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityTagRequest) ProtoMessage() {}

func (x *RemoveEntityTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityTagRequest.ProtoReflect.Descriptor instead.
func (*RemoveEntityTagRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveEntityTagRequest) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *RemoveEntityTagRequest) GetEntityLink() *EntityLink {
	if x != nil {
		return x.EntityLink
	}
	return nil
}

func (x *RemoveEntityTagRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type GetEntityTagsRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	EntityLink *EntityLink            `protobuf:"bytes,1,opt,name=entity_link,json=entityLink,proto3" json:"entity_link,omitempty"`
	// Добавить в ответ информацию об отмеченных тегах пользователем
	AddUserCheck bool `protobuf:"varint,2,opt,name=add_user_check,json=addUserCheck,proto3" json:"add_user_check,omitempty"`
	// Если не указано, значение берётся из контекста пользователя, который вызвал.
	// Для вызова от лица другого пользователя, требуется соответствующая привилегия.
	UserId        *int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityTagsRequest) Reset() {
	*x = GetEntityTagsRequest{}
	mi := &file_anipj_content_tags_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityTagsRequest) ProtoMessage() {}

func (x *GetEntityTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityTagsRequest.ProtoReflect.Descriptor instead.
func (*GetEntityTagsRequest) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{4}
}

func (x *GetEntityTagsRequest) GetEntityLink() *EntityLink {
	if x != nil {
		return x.EntityLink
	}
	return nil
}

func (x *GetEntityTagsRequest) GetAddUserCheck() bool {
	if x != nil {
		return x.AddUserCheck
	}
	return false
}

func (x *GetEntityTagsRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type GetEntityTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityLink    *EntityLink            `protobuf:"bytes,1,opt,name=entity_link,json=entityLink,proto3" json:"entity_link,omitempty"`
	UserId        *int32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Tags          []*TagOnEntity         `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityTagsResponse) Reset() {
	*x = GetEntityTagsResponse{}
	mi := &file_anipj_content_tags_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityTagsResponse) ProtoMessage() {}

func (x *GetEntityTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityTagsResponse.ProtoReflect.Descriptor instead.
func (*GetEntityTagsResponse) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{5}
}

func (x *GetEntityTagsResponse) GetEntityLink() *EntityLink {
	if x != nil {
		return x.EntityLink
	}
	return nil
}

func (x *GetEntityTagsResponse) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GetEntityTagsResponse) GetTags() []*TagOnEntity {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TagOnEntity struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Если поле присутствует:
	// true означает что тег выбран пользователем, от которого совершён вызов, иначе false
	Checked        *bool  `protobuf:"varint,4,opt,name=checked,proto3,oneof" json:"checked,omitempty"`
	UserVotesCount uint32 `protobuf:"varint,5,opt,name=user_votes_count,json=userVotesCount,proto3" json:"user_votes_count,omitempty"` // кол-во пользователей, отметивших этот тег
	IsSystem       bool   `protobuf:"varint,6,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`                     // тег изначально отмечен системой
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TagOnEntity) Reset() {
	*x = TagOnEntity{}
	mi := &file_anipj_content_tags_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagOnEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagOnEntity) ProtoMessage() {}

func (x *TagOnEntity) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagOnEntity.ProtoReflect.Descriptor instead.
func (*TagOnEntity) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{6}
}

func (x *TagOnEntity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagOnEntity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TagOnEntity) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TagOnEntity) GetChecked() bool {
	if x != nil && x.Checked != nil {
		return *x.Checked
	}
	return false
}

func (x *TagOnEntity) GetUserVotesCount() uint32 {
	if x != nil {
		return x.UserVotesCount
	}
	return 0
}

func (x *TagOnEntity) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

type Tag struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                      // строка на латинице в snake_case
	DisplayName       string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // отображаемое короткое русское имя
	Description       *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	TargetEntityTypes []EntityLink_Type      `protobuf:"varint,4,rep,packed,name=target_entity_types,json=targetEntityTypes,proto3,enum=anipj.content.v1dev.EntityLink_Type" json:"target_entity_types,omitempty"` // типы сущностей, на которые можно нацепить тег
	SystemOnly        bool                   `protobuf:"varint,5,opt,name=system_only,json=systemOnly,proto3" json:"system_only,omitempty"`                                                                        // может быть установлен только системой
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_anipj_content_tags_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_anipj_content_tags_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_anipj_content_tags_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Tag) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Tag) GetTargetEntityTypes() []EntityLink_Type {
	if x != nil {
		return x.TargetEntityTypes
	}
	return nil
}

func (x *Tag) GetSystemOnly() bool {
	if x != nil {
		return x.SystemOnly
	}
	return false
}

var File_anipj_content_tags_proto protoreflect.FileDescriptor

var file_anipj_content_tags_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x1a,
	0x1a, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x69,
	0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0xa8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x64, 0x65, 0x76, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x4f, 0x6e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xfa, 0x03, 0x0a, 0x0b,
	0x54, 0x61, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54,
	0x61, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x54, 0x61,
	0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6e,
	0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65,
	0x76, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x2b, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x29, 0x2e,
	0x61, 0x6e, 0x69, 0x70, 0x6a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x64, 0x65, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x69, 0x70, 0x6a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x64, 0x65, 0x76, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x29, 0x5a, 0x0d, 0x61, 0x6e, 0x69, 0x70,
	0x6a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x17, 0x41, 0x6e, 0x69, 0x70,
	0x6a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_anipj_content_tags_proto_rawDescOnce sync.Once
	file_anipj_content_tags_proto_rawDescData []byte
)

func file_anipj_content_tags_proto_rawDescGZIP() []byte {
	file_anipj_content_tags_proto_rawDescOnce.Do(func() {
		file_anipj_content_tags_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anipj_content_tags_proto_rawDesc), len(file_anipj_content_tags_proto_rawDesc)))
	})
	return file_anipj_content_tags_proto_rawDescData
}

var file_anipj_content_tags_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_anipj_content_tags_proto_goTypes = []any{
	(*ListTagsRequest)(nil),        // 0: anipj.content.v1dev.ListTagsRequest
	(*ListTagsResponse)(nil),       // 1: anipj.content.v1dev.ListTagsResponse
	(*AddEntityTagRequest)(nil),    // 2: anipj.content.v1dev.AddEntityTagRequest
	(*RemoveEntityTagRequest)(nil), // 3: anipj.content.v1dev.RemoveEntityTagRequest
	(*GetEntityTagsRequest)(nil),   // 4: anipj.content.v1dev.GetEntityTagsRequest
	(*GetEntityTagsResponse)(nil),  // 5: anipj.content.v1dev.GetEntityTagsResponse
	(*TagOnEntity)(nil),            // 6: anipj.content.v1dev.TagOnEntity
	(*Tag)(nil),                    // 7: anipj.content.v1dev.Tag
	(EntityLink_Type)(0),           // 8: anipj.content.v1dev.EntityLink.Type
	(*EntityLink)(nil),             // 9: anipj.content.v1dev.EntityLink
	(*emptypb.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_anipj_content_tags_proto_depIdxs = []int32{
	8,  // 0: anipj.content.v1dev.ListTagsRequest.entity_types:type_name -> anipj.content.v1dev.EntityLink.Type
	7,  // 1: anipj.content.v1dev.ListTagsResponse.tags:type_name -> anipj.content.v1dev.Tag
	9,  // 2: anipj.content.v1dev.AddEntityTagRequest.entity_link:type_name -> anipj.content.v1dev.EntityLink
	9,  // 3: anipj.content.v1dev.RemoveEntityTagRequest.entity_link:type_name -> anipj.content.v1dev.EntityLink
	9,  // 4: anipj.content.v1dev.GetEntityTagsRequest.entity_link:type_name -> anipj.content.v1dev.EntityLink
	9,  // 5: anipj.content.v1dev.GetEntityTagsResponse.entity_link:type_name -> anipj.content.v1dev.EntityLink
	6,  // 6: anipj.content.v1dev.GetEntityTagsResponse.tags:type_name -> anipj.content.v1dev.TagOnEntity
	8,  // 7: anipj.content.v1dev.Tag.target_entity_types:type_name -> anipj.content.v1dev.EntityLink.Type
	7,  // 8: anipj.content.v1dev.TagsService.CreateTag:input_type -> anipj.content.v1dev.Tag
	7,  // 9: anipj.content.v1dev.TagsService.UpdateTag:input_type -> anipj.content.v1dev.Tag
	0,  // 10: anipj.content.v1dev.TagsService.ListTags:input_type -> anipj.content.v1dev.ListTagsRequest
	2,  // 11: anipj.content.v1dev.TagsService.AddEntityTag:input_type -> anipj.content.v1dev.AddEntityTagRequest
	3,  // 12: anipj.content.v1dev.TagsService.RemoveEntityTag:input_type -> anipj.content.v1dev.RemoveEntityTagRequest
	4,  // 13: anipj.content.v1dev.TagsService.GetEntityTags:input_type -> anipj.content.v1dev.GetEntityTagsRequest
	10, // 14: anipj.content.v1dev.TagsService.CreateTag:output_type -> google.protobuf.Empty
	10, // 15: anipj.content.v1dev.TagsService.UpdateTag:output_type -> google.protobuf.Empty
	1,  // 16: anipj.content.v1dev.TagsService.ListTags:output_type -> anipj.content.v1dev.ListTagsResponse
	10, // 17: anipj.content.v1dev.TagsService.AddEntityTag:output_type -> google.protobuf.Empty
	10, // 18: anipj.content.v1dev.TagsService.RemoveEntityTag:output_type -> google.protobuf.Empty
	5,  // 19: anipj.content.v1dev.TagsService.GetEntityTags:output_type -> anipj.content.v1dev.GetEntityTagsResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_anipj_content_tags_proto_init() }
func file_anipj_content_tags_proto_init() {
	if File_anipj_content_tags_proto != nil {
		return
	}
	file_anipj_content_common_proto_init()
	file_anipj_content_tags_proto_msgTypes[2].OneofWrappers = []any{}
	file_anipj_content_tags_proto_msgTypes[3].OneofWrappers = []any{}
	file_anipj_content_tags_proto_msgTypes[4].OneofWrappers = []any{}
	file_anipj_content_tags_proto_msgTypes[5].OneofWrappers = []any{}
	file_anipj_content_tags_proto_msgTypes[6].OneofWrappers = []any{}
	file_anipj_content_tags_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anipj_content_tags_proto_rawDesc), len(file_anipj_content_tags_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anipj_content_tags_proto_goTypes,
		DependencyIndexes: file_anipj_content_tags_proto_depIdxs,
		MessageInfos:      file_anipj_content_tags_proto_msgTypes,
	}.Build()
	File_anipj_content_tags_proto = out.File
	file_anipj_content_tags_proto_goTypes = nil
	file_anipj_content_tags_proto_depIdxs = nil
}
