// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: anipj/content/tags.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TagsService_CreateTag_FullMethodName       = "/anipj.content.v1dev.TagsService/CreateTag"
	TagsService_UpdateTag_FullMethodName       = "/anipj.content.v1dev.TagsService/UpdateTag"
	TagsService_ListTags_FullMethodName        = "/anipj.content.v1dev.TagsService/ListTags"
	TagsService_AddEntityTag_FullMethodName    = "/anipj.content.v1dev.TagsService/AddEntityTag"
	TagsService_RemoveEntityTag_FullMethodName = "/anipj.content.v1dev.TagsService/RemoveEntityTag"
	TagsService_GetEntityTags_FullMethodName   = "/anipj.content.v1dev.TagsService/GetEntityTags"
)

// TagsServiceClient is the client API for TagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsServiceClient interface {
	CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	AddEntityTag(ctx context.Context, in *AddEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveEntityTag(ctx context.Context, in *RemoveEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEntityTags(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetEntityTagsRequest, GetEntityTagsResponse], error)
}

type tagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsServiceClient(cc grpc.ClientConnInterface) TagsServiceClient {
	return &tagsServiceClient{cc}
}

func (c *tagsServiceClient) CreateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagsService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) UpdateTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagsService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, TagsService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) AddEntityTag(ctx context.Context, in *AddEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagsService_AddEntityTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) RemoveEntityTag(ctx context.Context, in *RemoveEntityTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagsService_RemoveEntityTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) GetEntityTags(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetEntityTagsRequest, GetEntityTagsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TagsService_ServiceDesc.Streams[0], TagsService_GetEntityTags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetEntityTagsRequest, GetEntityTagsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TagsService_GetEntityTagsClient = grpc.BidiStreamingClient[GetEntityTagsRequest, GetEntityTagsResponse]

// TagsServiceServer is the server API for TagsService service.
// All implementations must embed UnimplementedTagsServiceServer
// for forward compatibility.
type TagsServiceServer interface {
	CreateTag(context.Context, *Tag) (*emptypb.Empty, error)
	UpdateTag(context.Context, *Tag) (*emptypb.Empty, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	AddEntityTag(context.Context, *AddEntityTagRequest) (*emptypb.Empty, error)
	RemoveEntityTag(context.Context, *RemoveEntityTagRequest) (*emptypb.Empty, error)
	GetEntityTags(grpc.BidiStreamingServer[GetEntityTagsRequest, GetEntityTagsResponse]) error
	mustEmbedUnimplementedTagsServiceServer()
}

// UnimplementedTagsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTagsServiceServer struct{}

func (UnimplementedTagsServiceServer) CreateTag(context.Context, *Tag) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedTagsServiceServer) UpdateTag(context.Context, *Tag) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedTagsServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedTagsServiceServer) AddEntityTag(context.Context, *AddEntityTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntityTag not implemented")
}
func (UnimplementedTagsServiceServer) RemoveEntityTag(context.Context, *RemoveEntityTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityTag not implemented")
}
func (UnimplementedTagsServiceServer) GetEntityTags(grpc.BidiStreamingServer[GetEntityTagsRequest, GetEntityTagsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetEntityTags not implemented")
}
func (UnimplementedTagsServiceServer) mustEmbedUnimplementedTagsServiceServer() {}
func (UnimplementedTagsServiceServer) testEmbeddedByValue()                     {}

// UnsafeTagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServiceServer will
// result in compilation errors.
type UnsafeTagsServiceServer interface {
	mustEmbedUnimplementedTagsServiceServer()
}

func RegisterTagsServiceServer(s grpc.ServiceRegistrar, srv TagsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTagsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TagsService_ServiceDesc, srv)
}

func _TagsService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagsService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).CreateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagsService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).UpdateTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagsService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_AddEntityTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).AddEntityTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagsService_AddEntityTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).AddEntityTag(ctx, req.(*AddEntityTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_RemoveEntityTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).RemoveEntityTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagsService_RemoveEntityTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).RemoveEntityTag(ctx, req.(*RemoveEntityTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_GetEntityTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TagsServiceServer).GetEntityTags(&grpc.GenericServerStream[GetEntityTagsRequest, GetEntityTagsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TagsService_GetEntityTagsServer = grpc.BidiStreamingServer[GetEntityTagsRequest, GetEntityTagsResponse]

// TagsService_ServiceDesc is the grpc.ServiceDesc for TagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anipj.content.v1dev.TagsService",
	HandlerType: (*TagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TagsService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TagsService_UpdateTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagsService_ListTags_Handler,
		},
		{
			MethodName: "AddEntityTag",
			Handler:    _TagsService_AddEntityTag_Handler,
		},
		{
			MethodName: "RemoveEntityTag",
			Handler:    _TagsService_RemoveEntityTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEntityTags",
			Handler:       _TagsService_GetEntityTags_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "anipj/content/tags.proto",
}
